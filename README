==Getting started==

Unpack the tar file. I'd put it in ~/.emacs.d/

Put the following in your startup (~/.emacs) file:

 (load "/path/to/gimp-init.el")

That file sets up some hooks to only load the stuff once needed.  Edit
the file to be consistent with your setup (load-paths an stuff).

Optionally, byte-compile gimp.el (and scheme-complete.el and snippet.el).

Put the file emacs-interaction.scm (a scheme file that ought to be
loaded for the Gimp to serve us some proper feedback) in

  ~/.gimp-2.4/scripts/

... or in another directory loaded by the Gimp.

On Linux, BSDs and Macs, a symbolic link for emacs-interaction.scm works fine
too (that's what I do to keep my cvs tree nice in one place).

Now run M-x run-gimp to start the Gimp and its REPL within Emacs. This takes a
little while (just a little longer than the graphical start-up fase - the Gimp
is told by emacs-interaction.scm to set up some caches in your local gimp
directory), so just be patient. See the customization for
`gimp-program-command-line' to tweak it to your needs.

To inquire about gimp-specific keybindings in a gimp buffer, say M-x
 gimp-help-on-help.

==Features==

Interaction mode for the GIMP.

TAB-completion like in Slime: the whole tiny-fu oblist is available and
vars/functions that are defined during a session are added to completion. 

Completion on arguments is done via a system of rules, based on
regexp-matching/custom commands that work on the documentation. This might have
to be improved and extended upon (see variable `gimp-completion-rules').

Argument echoing whereby current argument is highlighted. GimpMode gets its
information in this regard from the following sources: the procedural
database, the excellent TinyScheme-function `get-closure-code' and lastly from
scheme-complete.el. The echoing for script-fu functions toggles between the
registered names and the arguments derived from the closure itself.

Documentation lookup: for current argument (if this is a "gimp-procedure") or
entire function.

'Bookmarks' to Gimp/fu resources.

Shortcuts for various stuff. Type ,shortcuts at the REPL for an overview.

Snippets are provided through snippet.el. A registration template is provided
(reg SPACE), and handy templates for script-fu-register arguments (sf* SPACE).

Type M-x gimp-list-snippets to show snippets.

==Beyond script-fu==

See the functions `gimp-search-fu', `gimp-search-core-function' and
`gimp-search-plug-in-file'.

`gimp-search-fu' searches the source for script-fu functions
`gimp-search-plug-in-file' searches the source file of specified plug-in
`gimp-search-core-function' tries to find the source definition for core gimp
functions.

The last of these functions need the variable `gimp-src-dir' to be set, as
they search uncompiled files.

==Caveats==

1. This mode is developed on and for a GNU/Linux environment, on Emacs22 and Emacs
from CVS. I only have had very little time to test this on a win32 machine. It
did not work. Somehow the Gimp opens a second 'console', so it does not return
anything. I do not now about the behaviour on OSX. Not tested on BSD
either. Writing a mode based on the script-fu server would solve this
problem. However, it is a pain in the ass to get this to work stabily. (lost
connections, problems with the reader, having to wrap a (write ...) around
everything...). Ain't gonna do it. 

2. I have not written many script-fu files to test this mode on.

3. There is no way currently to recover from non-returning forms, such an infinite
loop, save for killing the process altogether.  I'd love to find a way to deal
with this.

==Related==

TIP on using `emacs-w3m' to browse gimp documentation:

To use emacs-w3m as the browser for help files from within the Gimp, put the
following in your .gimprc:

(help-browser web-browser)
(web-browser "emacsclient -e '(w3m-browse-url \"%s\")'")

and (server-start) in your .emacs

Browsing the help with emacs-w3m is very nice, esp. since you can make use of
the nice w3m-scroll-down-or-previous-url, w3m-scroll-up-or-next-url (SPACE) and
w3m-scroll-down-or-previous-url (b), as relative links are provided by the HTML
documentation of the Gimp.

==Wishes==

- Better shortcuts to documentation
- Better debugging/recovering from non-returning functions.
- Find a way to get to python/C stuff REGISTERED on procedure arguments.
  (such as: lower and upper bounds, step, precision, default values...)
  (this has already been done for script-fu)
- And of course I am open to suggestions

==Known Bugs==

- gimp-help-last does not set gimp-current-procedure

==FAQ==

Q: Why don't you use the script-fu server? 

A: It is way easier to start the Gimp as a subprocess, defining gimp-inferior
mode as a derived mode from inferior-scheme-mode than hacking up (write
(convert-form-to-emacs-readable FORM)) stuff. 

Q: What about a Python interface?

A: Like the script-fu server, the Python batch-interpreter doesn't talk back
(except on error). Therefore, this would require quite some
tweaking. Furthermore, the python console provided with the Gimp is quite
good.

Q. Why don't you simply use the script-fu console from within the Gimp?

A. Have you tried it?

Q. What about menu information?

A. I have not yet found out how to get there with fu.

Q. Stuff does not work correctly when I turn on tracing via (tracing 1)

A. Use the wrapper gimp-trace / gimp-untrace for that; at the REPL: ,trace
ENTER and ,untrace ENTER. NOTE that this tracing feature is only provided at
the REPL, not from .scm files.

Q. Why didn't you name it gimp.el?

A. There is already a gimp.el in the nxhtml distribution. And GimpMode is nicer
for wiki pages anyway. So gimp-mode.el it shall be. Just harder to interpret it
as a recursive acronym: gimp interaction mode for programmers mildly... gimp
interaction mode performed mostly on... Yes, it is hard.
