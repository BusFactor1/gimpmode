==Getting started==

Unpack the tar file. I'd put it in ~/.emacs.d/

Put the following in your startup (~/.emacs) file:

 (load "/path/to/gimp-init.el")

That file sets up some hooks to only load the stuff once needed.  Edit
the file to be consistent with your setup (load-paths an stuff).

Optionally, byte-compile gimp.el (and scheme-complete.el and snippet.el).

Put the file emacs-interaction.scm (a scheme file that ought to be
loaded for the Gimp to serve us some proper feedback) in

  ~/.gimp-2.4/scripts/

... or in another directory loaded by the Gimp.

On Linux, BSDs and Macs, a symbolic link for emacs-interaction.scm works fine
too (that's what I do to keep my cvs tree nice in one place).

Now run M-x run-gimp to start the Gimp and its REPL within
Emacs. This takes a little while (just a little longer than the
graphical start-up phase), so just be patient. See the customization
for `gimp-program-command-line' to tweak it to your needs.

To inquire about gimp-specific keybindings in a gimp buffer, say M-x
 gimp-help-on-help.

==Features==

TAB-completion like in Slime: the whole tiny-fu oblist is available and
vars/functions that are defined during a session are added to completion. 

Completion on arguments is done via guesses, based on regexp-parsing/custom
commands that work on the documentation. This might have to be improved and
extended upon (see variable `gimp-completion-rules'). 

Argument echoing whereby current argument is highlighted.

Documentation lookup: for current argument or entire function.

Snippets are provided through snippet.el. A registration template is provided
(reg SPACE), and handy templates for script-fu-register arguments (sf* SPACE).

==Beyond script-fu==

See the functions `gimp-search-fu', `gimp-search-core-function' and
`gimp-search-plug-in-file'.

`gimp-search-fu' searches the source for script-fu functions
`gimp-search-plug-in-file' searches the source file of specified plug-in
`gimp-search-core-function' tries to find the source definition for core gimp functions.

Some of these functions need the variable and `gimp-src-dir' to be
set, as they search uncompiled files.

==Caveats==

This mode is developed on and for a GNU/Linux environment, on Emacs22 and Emacs
from CVS. I only have had very little time to test this on a win32 machine. It
did not work. Somehow the Gimp opens a second 'console', so it does not return
anything. I do not now about the behaviour on OSX. Not tested on BSD
either. Writing a mode based on the script-fu server would solve this problem. I
am looking into this, but on the whole it seems to me to be more fragile than
running Gimp as a sub-process (lost connections, problems with the reader,
having to wrap a (write ...) around everything...). Perhaps.

I have not written many script-fu files to test this mode on. Please
give me something to work on.

==Related==

TIP on using `emacs-w3m' to browse gimp documentation:

To use emacs-w3m as the browser for help files from within the Gimp, put the
following in your .gimprc:

(help-browser web-browser)
(web-browser "emacsclient -e '(w3m-browse-url \"%s\")'")

and (server-start) in your .emacs

Browsing the help with emacs-w3m is very nice, esp. since you can make use of
the nice w3m-scroll-down-or-previous-url, w3m-scroll-up-or-next-url (SPACE) and
w3m-scroll-down-or-previous-url (b), as relative links are provided by the HTML
documentation of the Gimp.

==FAQ==

Q: Why don't you use the script-fu server? 

A: It is way easier to start the Gimp as a subprocess, defining gimp-inferior
mode as a derived mode from inferior-scheme-mode then hacking up (write
(convert-form-to-emacs-readable FORM)) stuff. Maybe in the future.

Q: What about a Python interface?

A: Like the script-fu server, the Python batch-interpreter doesn't talk back
(except on error). Therefore, this would require quite some
tweaking. Furthermore, the python console within the Gimp is quite good.

Q. Why don't you simply use the script-fu console from within the Gimp?

A. Have you tried it?

Q. What about menu information?

A. I have not yet found out how to get there with fu.

Q. Why do you use all these separate cache files instead of
gimp-procedural-db-dump?

A. Implemented caches before I knew about the dump. 

Q. Stuff does not work correctly when I turn on tracing via (tracing 1)

A. Use the wrapper gimp-trace / gimp-untrace for that; at the REPL: ,trace ENTER
and ,untrace ENTER

Q. Why didn't you name it gimp.el?

A. There is already a gimp.el in the nxhtml distribution. And GimpMode is nicer
for wiki pages anyway. So gimp-mode.el it shall be. Just harder to interpret it
as a recursive acronym: gimp interaction mode for programmers mildly... gimp
interaction mode performed mostly on... Yes, it is hard.
